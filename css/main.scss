---
---

// Google Fonts
@import url('https://fonts.googleapis.com/css?family=Raleway:100,200,300,400,500,600,700,800,900|Chonburi');
// @import url('https://fonts.googleapis.com/css?family=Courgette|Lobster|Niconne|Pacifico|Poiret+One|Reenie+Beanie');
// @import url('https://fonts.googleapis.com/css?family=Abril+Fatface|Chonburi|Gruppo|Prosto+One');

// Basic Variables

$spacing-unit:          30px;

$base-font-family:      "Raleway", sans-serif;
$base-font-size:        1.25rem;
$base-font-weight:      400;
$base-line-height:      1.4;
$base-line-length:      36em;

$header-font-weight:    800;

$title-font-family:     "Chonburi", serif;

$perspective:           1000px;

// Colors

$text-color:            #1d1d1d;
$background-color:      white;
$brand-color:           firebrick; // #981212 better if want applied to page title as well
$shadow-color:          rgba(0, 0, 0, 0.6);

$gray-color:            #828282;
$gray-color-light:      lighten($gray-color, 40%);
$gray-color-dark:       darken($gray-color, 25%);

$fa-icons:              ({% for icon in site.data.icon-types %}
                            {{ icon.type }}: {{ icon.color }},{% endfor %}
                        );

$project-images:        ({% for project in site.projects %}
                            {{ project.slug }}: url({{ site.baseurl }}/{{ site.prose.media}}/{{ project.image }}),{% endfor %}
                        );

// Layouts

$sizes: (
    "full":     100%,
    "no":       0,
);

$margins: (
    "auto":     auto,
    "0":        0,
    "m":        30px,
    "l":        60px,
);

$paddings: (
    "xs":       10px,
    "m":        30px,
    "l":        60px,
);

$borders: (
    "basic": (
        width: 1px,
        style: solid,
        color: inherit
    ),
);

$themes: (
    "light": (
        background-color: white,
        text-color: #1d1d1d,
    ),
    "dark": (
        background-color: #1d1d1d,
        text-color: white,
    ),
    "overlay": (
        background-color: rgba(black, 0.75),
        text-color: white,
    ),
);

$trans-default: .3s;
$trans-slow:    1s;
$trans-project: {{ site.project_transition_time }};

// Breakpoints

$bp: (
    //"x-large":  1800px,
    "large":    1000px,
    "laptop":   800px,
    "mobile":   600px,
);
$bp-laptop: map-get($bp, "laptop");
$bp-mobile: map-get($bp, "mobile");

// Mixins

$sides: "top", "bottom", "left", "right";
$side: null;

@function get-orientation($side) {
    @if $side == "top" or $side == "bottom" {
        @return "vertical";
    } @else if $side == "left" or $side == "right" {
        @return "horizontal";
    } @else {
        @error "Not a valid side."
    }
}

@mixin all-sides($class-name) {
    .#{$class-name} {
        @each $name in $sides {
            $side: $name !global;
            $o: str-slice(get-orientation($side), 1, 1);
            &, &-#{$o}, &-#{str-slice($side, 1, 1)} {
                @content;
            }
        }
    }
}

@mixin wrapper ($breakpoints, $min-margins: $spacing-unit) {
    $bp-first: nth($breakpoints, 1);
    $bp-last: nth($breakpoints, length($breakpoints));

    @if length($breakpoints) < 2 {
        @error "Invalid breakpoint list: must contain at least two values.";
    } @else if $bp-first < $bp-last {
        @error "Invalid breakpoint list: values should proceed from highest to lowest";
    }

    @extend .clearfix;
    margin-left: auto;
    margin-right: auto;
    max-width: $bp-first - ($min-margins * 2);

    @for $i from 1 to length($breakpoints) {
        $bp: nth($breakpoints, $i);
        $bp-next: nth($breakpoints, $i + 1);
        $query: null;
        $invalid: null;

        @if $bp < $bp-next {
            @error "Invalid breakpoint list: order must be consistent.";
        }

        @media screen and (max-width: $bp) {
            max-width: $bp-next - ($min-margins * 2);
        }
    }
}

@mixin fixed-ratio ($x, $y, $width: 100%) {
    @extend %fixed-ratio; // found in _layout partial
    width: $width;
    padding-top: $y/$x * $width;
}

@mixin columns-reset ($break-point) {
    //mobile reset
    @media screen and (max-width: $break-point) {
        .cell {
            display: block;

            .button {
                position: static;
                margin: 0 auto $spacing-unit;
            }
        }

        &.button-columns .cell {
            padding-bottom: 0;
        }
    }

    //desktop only: remove bottom margin of all last elements
    @media screen and (min-width: $break-point + 1px) {
        .cell > :last-child {
            margin-bottom: 0;
        }
    }
}

@mixin inline-columns ($columns, $spacing: 0) {
    @if not($columns > 1) { @error "inline-columns mixin must have more than one column." }
    $width: 100% / $columns;
    $row-end: $columns + "n";
    display: inline-block;
    width: calc(#{$width} - (#{$spacing} * (#{$columns} - 1) / #{$columns}));
    margin-right: $spacing;
    margin-bottom: $spacing;

    &:nth-child(#{$row-end}), &:last-child {
        margin-right: 0;
    }
}

@mixin blur($blur) {
    -webkit-filter: blur($blur);
    filter: blur($blur);
}

@mixin background-image ($image: none, $x: center, $y: center, $lighten: 0, $darken: 0, $blur: null) {

    @if $blur {
        @extend .relative, .overflow-h;

        &::after {
            $blur-offset: -$blur * 2;
            content: "";
            position: absolute;
            top: $blur-offset; left: $blur-offset; right: $blur-offset; bottom: $blur-offset;
            @include blur($blur);
            @include background-image($image, $x, $y, $lighten, $darken);
            z-index: -1;
        }
    } @else if $image != none {
        @if $lighten > 0 {
            background: linear-gradient(rgba(white, $lighten), rgba(white, $lighten)), $image;
        } @else if $darken > 0 {
            background: linear-gradient(rgba(black, $darken), rgba(black, $darken)), $image;
        } @else {
            background-image: $image;
        }
    } @else {
        @if $lighten > 0 {
            @extend .relative;

            &::after {
                content: "";
                position: absolute;
                top: 0; left: 0; right: 0; bottom: 0;
                background-color: rgba(255, 255, 255, $lighten);
                z-index: -1;
            }
        } @else if $darken > 0 {
            @extend .relative;

            &::after {
                content: "";
                position: absolute;
                top: 0; left: 0; right: 0; bottom: 0;
                background-color: rgba(0, 0, 0, $lighten);
                z-index: -1;
            }
        }
    }

    background-position: $x $y;
    background-repeat: no-repeat;
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
}

// This mixin applies the effects its contents when a element
// with class "hover" (either same element or a parent) is hovered
@mixin hover($hover-class: "hover") {
    &.#{$hover-class}:hover, .#{$hover-class}:hover & {
        @content
    }
}

// Partials

@import
    "base",
    "layout",
    "modules"
;
