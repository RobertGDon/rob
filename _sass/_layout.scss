/*
 * Generated
 */

@each $name, $size in $sizes {
    .#{$name} {
        &-size, &-width {
            width: $size;
        }
        &-size, &-height {
            height: $size;
        }
    }
}

@each $name, $size in $margins {
    @include all-sides("margin-" + $name) {
        margin-#{$side}: $size;
    }
}

@each $name, $size in $paddings {
    @include all-sides("padding-" + $name) {
        padding-#{$side}: $size;
    }
}

@each $name, $styles in $borders {
    @include all-sides("border-" + $name) {
        border-#{$side}-width: map-get($styles, width);
        border-#{$side}-style: map-get($styles, style);
        border-#{$side}-color: map-get($styles, color);
    }
}

@each $name, $styles in $themes {
    $text-color: map-get($styles, "text-color");
    $background-color: map-get($styles, "background-color");

    .#{$name} {
        background-color: $background-color;
        color: $text-color;
        border-color: $text-color;

        @if map-has-key($styles, "font-smoothing") {
            $fs: map-get($styles, "font-smoothing");
            @if $fs == "normal" {
                @extend .font-smoothing-normal;
            } @else if $fs == "dark" {
                @extend .font-smoothing-dark;
            } @else {
                @error "Bad font-smoothing value in #{$name} theme."
            }
        }

        & .text-light {
            @if lightness($text-color) < lightness($background-color) {
                color: lighten($text-color, 40%);
            } @else {
                color: darken($text-color, 40%);
            }
        }

        & .border-light {
            @if lightness($text-color) < lightness($background-color) {
                border-color: darken($background-color, 20%);
            } @else {
                border-color: lighten($background-color, 20%);
            }
        }
    }
}

/*
 * Basic
 */

.block {
    display: block;
}

.inline {
    display: inline;
}

.inline-block {
    display: inline-block;
}

.relative {
    position: relative;
}

.absolute {
    position: absolute;
}

.float-left {
    float: left;
}

.float-right {
    float: right;
}

.v-rhythm > * {
    @extend %vertical-rhythm;
}

.fullscreen {
    min-height: 100vh;
}

.fullscreen-fixed {
    height: 100vh;
}

.hidden {
    display: none;
}

.clearfix:after {
    content: "";
    display: table;
    clear: both;
    border-spacing: 0;
}

/*
 * Wrappers
 */

.page-wrapper {
    @include wrapper(map-values($bp));
    min-width: 50%;
}

.unwrap {
    width: 100vw;
    margin-left: calc(50% - 50vw);
    margin-right: calc(50% - 50vw);
}

.stretch {
    @extend .unwrap;
    padding-left: calc(50vw - 50%);
    padding-right: calc(50vw - 50%);
}

/*
 * Containers
 */

.container {
    overflow: hidden;
}

.fill-parent {
    position: absolute;
    top: 0; left: 0;
    width: 100%;
    height: 100%;
}

.expand-children {
    position: relative;

    & > * {
        @extend .fill-parent;
    }
}

%fixed-ratio { // extended by the fixed-ratio mixin
    @extend .expand-children;
    height: 0;
}

.square {
    @include fixed-ratio(1, 1);
}

.aspect-16-9 {
    @include fixed-ratio(16, 9);
}

/*
 * Tables
 */

.table {
    display: table;
}

.table-fixed {
    @extend .table;
    table-layout: fixed;
}

.column {
    display: column;
}

.row {
    display: table-row;
}

.cell {
    display: table-cell;
}

.v-center {
    vertical-align: middle;
}

%columns {
    display: table;
    width: calc(100% + (#{$spacing-unit} * 2));
    margin: -$spacing-unit;
    border-spacing: $spacing-unit;
    table-layout: fixed;

    &:last-child > :last-child {
        margin-bottom: 0;
    }
}

@each $name, $breakpoint in $bp {
    .#{$name}-columns {
        @extend %columns;
        @include columns-reset($breakpoint);
    }
}

/*
 * Inline Layouts
 */

.font-0 {
    font-size: 0;

    > * {
        font-size: $base-font-size;
    }
}

.inline-row {
    white-space: nowrap;

    > * {
        display: inline-block;
        white-space: normal;
    }
}

.inline-col-1 {
    @media screen and (min-width: map-get($bp, large)) {
        @include inline-columns(5, 10px);
    }

    @media screen and (max-width: map-get($bp, large)) and (min-width: $bp-laptop) {
        @include inline-columns(4, 10px);
    }

    @media screen and (max-width: $bp-laptop) and (min-width: 460px) {
        @include inline-columns(3, 10px);
    }

    @media screen and (max-width: 460px) {
        @include inline-columns(2, 10px);
    }
}

/*
 * Flexbox
 */

.flex-row {
    display: flex;
    flex-direction: row;
}

.flex-col {
    display: flex;
    flex-direction: column;
}

.flex-justify-center {
    justify-content: center;
}

.flex-align-center {
    align-items: center;
}

.flex-center {
    @extend .flex-justify-center, .flex-align-center;
}

.fill-flex-parent {
    flex: 1 1 auto;
}

.flex-even > * {
    flex: 1 1 0%;
}

.flex-space-between {
    justify-content: space-between;
}

.flex-space-around {
    justify-content: space-around;
}
